import * as soap from 'soap';
import * as xml2js from 'xml2js';

/**
 * A wrapper class for making SOAP calls and processing SOAP data.
 */
class BTOSoapWrapper {
  /**
   * Creates an instance of BTOSoapWrapper.
   */
  constructor(wsdlUrl, options = {}) {
    /**
     * The URL of the WSDL file.
     */
    this.wsdlUrl = wsdlUrl;

    /**
     * Options for the SOAP client.
     */
    this.options = options;
  }

  /**
   * Creates a SOAP call using the specified method and arguments.
   */
  async createSoapCall(methodName, args) {
    try {
      const client = await soap.createClientAsync(this.wsdlUrl, this.options);
      const result = await client[`${methodName}Async`](args);
      return result[0];
    } catch (error) {
      throw new Error(`SOAP request failed: ${error.message}`);
    }
  }

  /**
   * Retrieves SOAP data using the specified method and arguments.
   */
  async retrieveSoapData(methodName, args) {
    try {
      const soapResponse = await this.createSoapCall(methodName, args);
      return soapResponse;
    } catch (error) {
      throw new Error(`SOAP retrieving failed: ${error.message}`);
    }
  }

  /**
   * Parses raw SOAP data into JSON format.
   */
  async parseSoapDataToJson(soapData) {
    try {
      const parser = new xml2js.Parser({ explicitArray: false, ignoreAttrs: true });
      const parsedData = await parser.parseStringPromise(soapData);
      return parsedData;
    } catch (error) {
      throw new Error(`Error parsing SOAP response: ${error.message}`);
    }
  }

  /**
   * Retrieves and parses SOAP data into JSON format.
   */
  async getSoapDataAsJson(methodName, args) {
    try {
      const soapResponse = await this.retrieveSoapData(methodName, args);
      const jsonData = await this.parseSoapDataToJson(soapResponse);
      return jsonData;
    } catch (error) {
      throw new Error(`Error processing SOAP data: ${error.message}`);
    }
  }
}

export { BTOSoapWrapper };



(async () => {
  const wsdlUrl = 'your-wsdl-url';
  const soapClient = new BTOSoapWrapper(wsdlUrl);

  const methodName = 'MethodName';
  const args = {
    // Add your method arguments here
  };

  try {
    const jsonData = await soapClient.getSoapDataAsJson(methodName, args);
    console.log('Parsed JSON data:', jsonData);
  } catch (error) {
    console.error('Error:', error.message);
  }
})();
